GAS LISTING /tmp/cczvgKOE.s 			page 1


   1               		.file	"ds18b20.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/pi/Projects/atmega640/iot-interface/",100,0,2,.Ltext0
   8               		.stabs	"ds18b20.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"__int128:t(0,6)=@s128;r(0,6);02000000000000000000000000000000000000000000;0177777777777777
  18               		.stabs	"__int128 unsigned:t(0,7)=@s128;r(0,7);0;03777777777777777777777777777777777777777777;",128
  19               		.stabs	"long long int:t(0,8)=@s64;r(0,8);01000000000000000000000;00777777777777777777777;",128,0,0
  20               		.stabs	"long long unsigned int:t(0,9)=@s64;r(0,9);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,10)=r(0,10);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,11)=r(0,11);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,12)=@s8;r(0,12);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,15)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,16)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"short _Fract:t(0,17)=r(0,1);1;0;",128,0,0,0
  29               		.stabs	"_Fract:t(0,18)=r(0,1);2;0;",128,0,0,0
  30               		.stabs	"long _Fract:t(0,19)=r(0,1);4;0;",128,0,0,0
  31               		.stabs	"long long _Fract:t(0,20)=r(0,1);8;0;",128,0,0,0
  32               		.stabs	"unsigned short _Fract:t(0,21)=r(0,1);1;0;",128,0,0,0
  33               		.stabs	"unsigned _Fract:t(0,22)=r(0,1);2;0;",128,0,0,0
  34               		.stabs	"unsigned long _Fract:t(0,23)=r(0,1);4;0;",128,0,0,0
  35               		.stabs	"unsigned long long _Fract:t(0,24)=r(0,1);8;0;",128,0,0,0
  36               		.stabs	"_Sat short _Fract:t(0,25)=r(0,1);1;0;",128,0,0,0
  37               		.stabs	"_Sat _Fract:t(0,26)=r(0,1);2;0;",128,0,0,0
  38               		.stabs	"_Sat long _Fract:t(0,27)=r(0,1);4;0;",128,0,0,0
  39               		.stabs	"_Sat long long _Fract:t(0,28)=r(0,1);8;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned short _Fract:t(0,29)=r(0,1);1;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned _Fract:t(0,30)=r(0,1);2;0;",128,0,0,0
  42               		.stabs	"_Sat unsigned long _Fract:t(0,31)=r(0,1);4;0;",128,0,0,0
  43               		.stabs	"_Sat unsigned long long _Fract:t(0,32)=r(0,1);8;0;",128,0,0,0
  44               		.stabs	"short _Accum:t(0,33)=r(0,1);2;0;",128,0,0,0
  45               		.stabs	"_Accum:t(0,34)=r(0,1);4;0;",128,0,0,0
  46               		.stabs	"long _Accum:t(0,35)=r(0,1);8;0;",128,0,0,0
  47               		.stabs	"long long _Accum:t(0,36)=r(0,1);8;0;",128,0,0,0
  48               		.stabs	"unsigned short _Accum:t(0,37)=r(0,1);2;0;",128,0,0,0
  49               		.stabs	"unsigned _Accum:t(0,38)=r(0,1);4;0;",128,0,0,0
  50               		.stabs	"unsigned long _Accum:t(0,39)=r(0,1);8;0;",128,0,0,0
  51               		.stabs	"unsigned long long _Accum:t(0,40)=r(0,1);8;0;",128,0,0,0
  52               		.stabs	"_Sat short _Accum:t(0,41)=r(0,1);2;0;",128,0,0,0
  53               		.stabs	"_Sat _Accum:t(0,42)=r(0,1);4;0;",128,0,0,0
  54               		.stabs	"_Sat long _Accum:t(0,43)=r(0,1);8;0;",128,0,0,0
  55               		.stabs	"_Sat long long _Accum:t(0,44)=r(0,1);8;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned short _Accum:t(0,45)=r(0,1);2;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned _Accum:t(0,46)=r(0,1);4;0;",128,0,0,0
GAS LISTING /tmp/cczvgKOE.s 			page 2


  58               		.stabs	"_Sat unsigned long _Accum:t(0,47)=r(0,1);8;0;",128,0,0,0
  59               		.stabs	"_Sat unsigned long long _Accum:t(0,48)=r(0,1);8;0;",128,0,0,0
  60               		.stabs	"void:t(0,49)=(0,49)",128,0,0,0
  61               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  62               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  64               		.stabs	"/usr/lib/gcc/avr/5.4.0/include/stdint.h",130,0,0,0
  65               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  66               		.stabs	"int8_t:t(5,1)=(0,12)",128,0,125,0
  67               		.stabs	"uint8_t:t(5,2)=(0,13)",128,0,126,0
  68               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,127,0
  69               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,128,0
  70               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,129,0
  71               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,130,0
  72               		.stabs	"int64_t:t(5,7)=(0,8)",128,0,132,0
  73               		.stabs	"uint64_t:t(5,8)=(0,9)",128,0,133,0
  74               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,146,0
  75               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,151,0
  76               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,163,0
  77               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,168,0
  78               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,173,0
  79               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,178,0
  80               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,183,0
  81               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,188,0
  82               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,196,0
  83               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,203,0
  84               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,217,0
  85               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,222,0
  86               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,227,0
  87               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,232,0
  88               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,237,0
  89               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,242,0
  90               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,250,0
  91               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,257,0
  92               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,277,0
  93               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,282,0
  94               		.stabn	162,0,0,0
  95               		.stabn	162,0,0,0
  96               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  97               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  98               		.stabn	162,0,0,0
  99               		.stabn	162,0,0,0
 100               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 101               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,244,0
 102               		.stabn	162,0,0,0
 103               		.stabn	162,0,0,0
 104               		.stabs	"ds18b20_reset:F(5,2)",36,0,19,ds18b20_reset
 105               	.global	ds18b20_reset
 106               		.type	ds18b20_reset, @function
 107               	ds18b20_reset:
 108               		.stabd	46,0,0
   1:ds18b20.c     **** /*
   2:ds18b20.c     **** ds18b20 lib 0x02
   3:ds18b20.c     **** 
   4:ds18b20.c     **** copyright (c) Davide Gironi, 2012
   5:ds18b20.c     **** 
   6:ds18b20.c     **** Released under GPLv3.
GAS LISTING /tmp/cczvgKOE.s 			page 3


   7:ds18b20.c     **** Please refer to LICENSE file for licensing information.
   8:ds18b20.c     **** */
   9:ds18b20.c     **** 
  10:ds18b20.c     **** #include <avr/io.h>
  11:ds18b20.c     **** #include <util/delay.h>
  12:ds18b20.c     **** #include <avr/interrupt.h>
  13:ds18b20.c     **** 
  14:ds18b20.c     **** #include "ds18b20.h"
  15:ds18b20.c     **** 
  16:ds18b20.c     **** /*
  17:ds18b20.c     ****  * ds18b20 init
  18:ds18b20.c     ****  */
  19:ds18b20.c     **** uint8_t ds18b20_reset(void) {
 109               		.stabn	68,0,19,.LM0-.LFBB1
 110               	.LM0:
 111               	.LFBB1:
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
  20:ds18b20.c     **** 	uint8_t i;
  21:ds18b20.c     **** 
  22:ds18b20.c     **** 	//low for 480us
  23:ds18b20.c     **** 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
 116               		.stabn	68,0,23,.LM1-.LFBB1
 117               	.LM1:
 118 0000 1098      		cbi 0x2,0
  24:ds18b20.c     **** 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
 119               		.stabn	68,0,24,.LM2-.LFBB1
 120               	.LM2:
 121 0002 089A      		sbi 0x1,0
 122               	.LBB18:
 123               	.LBB19:
 124               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 125               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
GAS LISTING /tmp/cczvgKOE.s 			page 4


  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
GAS LISTING /tmp/cczvgKOE.s 			page 5


  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
GAS LISTING /tmp/cczvgKOE.s 			page 6


 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
GAS LISTING /tmp/cczvgKOE.s 			page 7


 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
GAS LISTING /tmp/cczvgKOE.s 			page 8


 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 126               		.stabn	68,0,276,.LM3-.LFBB1
 127               	.LM3:
 128 0004 80EA      		ldi r24,lo8(-96)
 129 0006 8A95      	1:	dec r24
 130 0008 01F4      		brne 1b
 131               	.LBE19:
 132               	.LBE18:
 133               		.stabs	"ds18b20.c",132,0,0,.Ltext2
 134               	.Ltext2:
  25:ds18b20.c     **** 	_delay_us(480);
  26:ds18b20.c     **** 
  27:ds18b20.c     **** 	//release line and wait for 60uS
  28:ds18b20.c     **** 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
 135               		.stabn	68,0,28,.LM4-.LFBB1
 136               	.LM4:
 137 000a 0898      		cbi 0x1,0
 138               	.LBB20:
 139               	.LBB21:
 140               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext3
 141               	.Ltext3:
 142               		.stabn	68,0,276,.LM5-.LFBB1
 143               	.LM5:
 144 000c 94E1      		ldi r25,lo8(20)
 145 000e 9A95      	1:	dec r25
 146 0010 01F4      		brne 1b
 147               	.LBE21:
 148               	.LBE20:
 149               		.stabs	"ds18b20.c",132,0,0,.Ltext4
 150               	.Ltext4:
  29:ds18b20.c     **** 	_delay_us(60);
  30:ds18b20.c     **** 
GAS LISTING /tmp/cczvgKOE.s 			page 9


  31:ds18b20.c     **** 	//get value and wait 420us
  32:ds18b20.c     **** 	i = (DS18B20_PIN & (1<<DS18B20_DQ));
 151               		.stabn	68,0,32,.LM6-.LFBB1
 152               	.LM6:
 153 0012 80B1      		in r24,0
 154               	.LBB22:
 155               	.LBB23:
 156               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext5
 157               	.Ltext5:
 158               		.stabn	68,0,276,.LM7-.LFBB1
 159               	.LM7:
 160 0014 9CE8      		ldi r25,lo8(-116)
 161 0016 9A95      	1:	dec r25
 162 0018 01F4      		brne 1b
 163               	.LBE23:
 164               	.LBE22:
 165               		.stabs	"ds18b20.c",132,0,0,.Ltext6
 166               	.Ltext6:
  33:ds18b20.c     **** 	_delay_us(420);
  34:ds18b20.c     **** 
  35:ds18b20.c     **** 	//return the read value, 0=ok, 1=error
  36:ds18b20.c     **** 	return i;
  37:ds18b20.c     **** }
 167               		.stabn	68,0,37,.LM8-.LFBB1
 168               	.LM8:
 169 001a 8170      		andi r24,lo8(1)
 170 001c 0895      		ret
 171               		.size	ds18b20_reset, .-ds18b20_reset
 172               	.Lscope1:
 173               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 174               		.stabd	78,0,0
 175               		.stabs	"ds18b20_writebit:F(0,49)",36,0,42,ds18b20_writebit
 176               		.stabs	"bit:P(5,2)",64,0,42,24
 177               	.global	ds18b20_writebit
 178               		.type	ds18b20_writebit, @function
 179               	ds18b20_writebit:
 180               		.stabd	46,0,0
  38:ds18b20.c     **** 
  39:ds18b20.c     **** /*
  40:ds18b20.c     ****  * write one bit
  41:ds18b20.c     ****  */
  42:ds18b20.c     **** void ds18b20_writebit(uint8_t bit){
 181               		.stabn	68,0,42,.LM9-.LFBB2
 182               	.LM9:
 183               	.LFBB2:
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 0 */
 187               	.L__stack_usage = 0
  43:ds18b20.c     **** 	//low for 1uS
  44:ds18b20.c     **** 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
 188               		.stabn	68,0,44,.LM10-.LFBB2
 189               	.LM10:
 190 001e 1098      		cbi 0x2,0
  45:ds18b20.c     **** 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
 191               		.stabn	68,0,45,.LM11-.LFBB2
 192               	.LM11:
GAS LISTING /tmp/cczvgKOE.s 			page 10


 193 0020 089A      		sbi 0x1,0
 194               	.LBB24:
 195               	.LBB25:
 196               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext7
 197               	.Ltext7:
 198               		.stabn	68,0,276,.LM12-.LFBB2
 199               	.LM12:
 200 0022 0000      		nop
 201               	.LBE25:
 202               	.LBE24:
 203               		.stabs	"ds18b20.c",132,0,0,.Ltext8
 204               	.Ltext8:
  46:ds18b20.c     **** 	_delay_us(1);
  47:ds18b20.c     **** 
  48:ds18b20.c     **** 	//if we want to write 1, release the line (if not will keep low)
  49:ds18b20.c     **** 	if(bit)
 205               		.stabn	68,0,49,.LM13-.LFBB2
 206               	.LM13:
 207 0024 8111      		cpse r24,__zero_reg__
  50:ds18b20.c     **** 		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
 208               		.stabn	68,0,50,.LM14-.LFBB2
 209               	.LM14:
 210 0026 0898      		cbi 0x1,0
 211               	.L3:
 212               	.LBB26:
 213               	.LBB27:
 214               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext9
 215               	.Ltext9:
 216               		.stabn	68,0,276,.LM15-.LFBB2
 217               	.LM15:
 218 0028 84E1      		ldi r24,lo8(20)
 219 002a 8A95      	1:	dec r24
 220 002c 01F4      		brne 1b
 221               	.LBE27:
 222               	.LBE26:
 223               		.stabs	"ds18b20.c",132,0,0,.Ltext10
 224               	.Ltext10:
  51:ds18b20.c     **** 
  52:ds18b20.c     **** 	//wait 60uS and release the line
  53:ds18b20.c     **** 	_delay_us(60);
  54:ds18b20.c     **** 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
 225               		.stabn	68,0,54,.LM16-.LFBB2
 226               	.LM16:
 227 002e 0898      		cbi 0x1,0
 228 0030 0895      		ret
 229               		.size	ds18b20_writebit, .-ds18b20_writebit
 230               	.Lscope2:
 231               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 232               		.stabd	78,0,0
 233               		.stabs	"ds18b20_readbit:F(5,2)",36,0,60,ds18b20_readbit
 234               	.global	ds18b20_readbit
 235               		.type	ds18b20_readbit, @function
 236               	ds18b20_readbit:
 237               		.stabd	46,0,0
  55:ds18b20.c     **** }
  56:ds18b20.c     **** 
  57:ds18b20.c     **** /*
GAS LISTING /tmp/cczvgKOE.s 			page 11


  58:ds18b20.c     ****  * read one bit
  59:ds18b20.c     ****  */
  60:ds18b20.c     **** uint8_t ds18b20_readbit(void){
 238               		.stabn	68,0,60,.LM17-.LFBB3
 239               	.LM17:
 240               	.LFBB3:
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
  61:ds18b20.c     **** 	uint8_t bit=0;
  62:ds18b20.c     **** 
  63:ds18b20.c     **** 	//low for 1uS
  64:ds18b20.c     **** 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
 245               		.stabn	68,0,64,.LM18-.LFBB3
 246               	.LM18:
 247 0032 1098      		cbi 0x2,0
  65:ds18b20.c     **** 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
 248               		.stabn	68,0,65,.LM19-.LFBB3
 249               	.LM19:
 250 0034 089A      		sbi 0x1,0
 251               	.LBB28:
 252               	.LBB29:
 253               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext11
 254               	.Ltext11:
 255               		.stabn	68,0,276,.LM20-.LFBB3
 256               	.LM20:
 257 0036 0000      		nop
 258               	.LBE29:
 259               	.LBE28:
 260               		.stabs	"ds18b20.c",132,0,0,.Ltext12
 261               	.Ltext12:
  66:ds18b20.c     **** 	_delay_us(1);
  67:ds18b20.c     **** 
  68:ds18b20.c     **** 	//release line and wait for 14uS
  69:ds18b20.c     **** 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
 262               		.stabn	68,0,69,.LM21-.LFBB3
 263               	.LM21:
 264 0038 0898      		cbi 0x1,0
 265               	.LBB30:
 266               	.LBB31:
 267               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext13
 268               	.Ltext13:
 269               		.stabn	68,0,276,.LM22-.LFBB3
 270               	.LM22:
 271 003a 84E0      		ldi r24,lo8(4)
 272 003c 8A95      	1:	dec r24
 273 003e 01F4      		brne 1b
 274 0040 00C0      		rjmp .
 275               	.LBE31:
 276               	.LBE30:
 277               		.stabs	"ds18b20.c",132,0,0,.Ltext14
 278               	.Ltext14:
  70:ds18b20.c     **** 	_delay_us(14);
  71:ds18b20.c     **** 
  72:ds18b20.c     **** 	//read the value
  73:ds18b20.c     **** 	if(DS18B20_PIN & (1<<DS18B20_DQ))
GAS LISTING /tmp/cczvgKOE.s 			page 12


 279               		.stabn	68,0,73,.LM23-.LFBB3
 280               	.LM23:
 281 0042 80B1      		in r24,0
 282               	.LBB32:
 283               	.LBB33:
 284               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext15
 285               	.Ltext15:
 286               		.stabn	68,0,276,.LM24-.LFBB3
 287               	.LM24:
 288 0044 9FE0      		ldi r25,lo8(15)
 289 0046 9A95      	1:	dec r25
 290 0048 01F4      		brne 1b
 291               	.LBE33:
 292               	.LBE32:
 293               		.stabs	"ds18b20.c",132,0,0,.Ltext16
 294               	.Ltext16:
  74:ds18b20.c     **** 		bit=1;
  75:ds18b20.c     **** 
  76:ds18b20.c     **** 	//wait 45uS and return read value
  77:ds18b20.c     **** 	_delay_us(45);
  78:ds18b20.c     **** 	return bit;
  79:ds18b20.c     **** }
 295               		.stabn	68,0,79,.LM25-.LFBB3
 296               	.LM25:
 297 004a 8170      		andi r24,lo8(1)
 298 004c 0895      		ret
 299               		.size	ds18b20_readbit, .-ds18b20_readbit
 300               	.Lscope3:
 301               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 302               		.stabd	78,0,0
 303               		.stabs	"ds18b20_writebyte:F(0,49)",36,0,84,ds18b20_writebyte
 304               		.stabs	"byte:P(5,2)",64,0,84,29
 305               	.global	ds18b20_writebyte
 306               		.type	ds18b20_writebyte, @function
 307               	ds18b20_writebyte:
 308               		.stabd	46,0,0
  80:ds18b20.c     **** 
  81:ds18b20.c     **** /*
  82:ds18b20.c     ****  * write one byte
  83:ds18b20.c     ****  */
  84:ds18b20.c     **** void ds18b20_writebyte(uint8_t byte){
 309               		.stabn	68,0,84,.LM26-.LFBB4
 310               	.LM26:
 311               	.LFBB4:
 312 004e CF93      		push r28
 313 0050 DF93      		push r29
 314               	/* prologue: function */
 315               	/* frame size = 0 */
 316               	/* stack size = 2 */
 317               	.L__stack_usage = 2
 318 0052 D82F      		mov r29,r24
  85:ds18b20.c     **** 	uint8_t i=8;
  86:ds18b20.c     **** 	while(i--){
 319               		.stabn	68,0,86,.LM27-.LFBB4
 320               	.LM27:
 321 0054 C9E0      		ldi r28,lo8(9)
 322               	.L10:
GAS LISTING /tmp/cczvgKOE.s 			page 13


 323 0056 C150      		subi r28,lo8(-(-1))
 324 0058 01F0      		breq .L12
  87:ds18b20.c     **** 		ds18b20_writebit(byte&1);
 325               		.stabn	68,0,87,.LM28-.LFBB4
 326               	.LM28:
 327 005a 8D2F      		mov r24,r29
 328 005c 8170      		andi r24,lo8(1)
 329 005e 0E94 0000 		call ds18b20_writebit
  88:ds18b20.c     **** 		byte >>= 1;
 330               		.stabn	68,0,88,.LM29-.LFBB4
 331               	.LM29:
 332 0062 D695      		lsr r29
 333 0064 00C0      		rjmp .L10
 334               	.L12:
 335               	/* epilogue start */
  89:ds18b20.c     **** 	}
  90:ds18b20.c     **** }
 336               		.stabn	68,0,90,.LM30-.LFBB4
 337               	.LM30:
 338 0066 DF91      		pop r29
 339 0068 CF91      		pop r28
 340 006a 0895      		ret
 341               		.size	ds18b20_writebyte, .-ds18b20_writebyte
 342               	.Lscope4:
 343               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 344               		.stabd	78,0,0
 345               		.stabs	"ds18b20_readbyte:F(5,2)",36,0,95,ds18b20_readbyte
 346               	.global	ds18b20_readbyte
 347               		.type	ds18b20_readbyte, @function
 348               	ds18b20_readbyte:
 349               		.stabd	46,0,0
  91:ds18b20.c     **** 
  92:ds18b20.c     **** /*
  93:ds18b20.c     ****  * read one byte
  94:ds18b20.c     ****  */
  95:ds18b20.c     **** uint8_t ds18b20_readbyte(void){
 350               		.stabn	68,0,95,.LM31-.LFBB5
 351               	.LM31:
 352               	.LFBB5:
 353 006c CF93      		push r28
 354 006e DF93      		push r29
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 2 */
 358               	.L__stack_usage = 2
  96:ds18b20.c     **** 	uint8_t i=8, n=0;
  97:ds18b20.c     **** 	while(i--){
 359               		.stabn	68,0,97,.LM32-.LFBB5
 360               	.LM32:
 361 0070 D9E0      		ldi r29,lo8(9)
  96:ds18b20.c     **** 	uint8_t i=8, n=0;
 362               		.stabn	68,0,96,.LM33-.LFBB5
 363               	.LM33:
 364 0072 C0E0      		ldi r28,0
 365               	.L14:
 366 0074 D150      		subi r29,lo8(-(-1))
 367               		.stabn	68,0,97,.LM34-.LFBB5
GAS LISTING /tmp/cczvgKOE.s 			page 14


 368               	.LM34:
 369 0076 01F0      		breq .L16
  98:ds18b20.c     **** 		n >>= 1;
  99:ds18b20.c     **** 		n |= (ds18b20_readbit()<<7);
 370               		.stabn	68,0,99,.LM35-.LFBB5
 371               	.LM35:
 372 0078 0E94 0000 		call ds18b20_readbit
 373 007c 20E8      		ldi r18,lo8(-128)
 374 007e 829F      		mul r24,r18
 375 0080 C001      		movw r24,r0
 376 0082 1124      		clr __zero_reg__
 377 0084 C695      		lsr r28
 378 0086 C82B      		or r28,r24
 379 0088 00C0      		rjmp .L14
 380               	.L16:
 100:ds18b20.c     **** 	}
 101:ds18b20.c     **** 	return n;
 102:ds18b20.c     **** }
 381               		.stabn	68,0,102,.LM36-.LFBB5
 382               	.LM36:
 383 008a 8C2F      		mov r24,r28
 384               	/* epilogue start */
 385 008c DF91      		pop r29
 386 008e CF91      		pop r28
 387 0090 0895      		ret
 388               		.size	ds18b20_readbyte, .-ds18b20_readbyte
 389               	.Lscope5:
 390               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 391               		.stabd	78,0,0
 392               		.stabs	"ds18b20Gettemp:F(0,1)",36,0,107,ds18b20Gettemp
 393               	.global	ds18b20Gettemp
 394               		.type	ds18b20Gettemp, @function
 395               	ds18b20Gettemp:
 396               		.stabd	46,0,0
 103:ds18b20.c     **** 
 104:ds18b20.c     **** /*
 105:ds18b20.c     ****  * get temperature
 106:ds18b20.c     ****  */
 107:ds18b20.c     **** int ds18b20Gettemp(void) {
 397               		.stabn	68,0,107,.LM37-.LFBB6
 398               	.LM37:
 399               	.LFBB6:
 400 0092 CF93      		push r28
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 1 */
 404               	.L__stack_usage = 1
 108:ds18b20.c     **** 	uint8_t temperature_l;
 109:ds18b20.c     **** 	uint8_t temperature_h;
 110:ds18b20.c     **** 	int retd = 0;
 111:ds18b20.c     **** 
 112:ds18b20.c     **** 	#if DS18B20_STOPINTERRUPTONREAD == 1
 113:ds18b20.c     **** 	cli();
 405               		.stabn	68,0,113,.LM38-.LFBB6
 406               	.LM38:
 407               	/* #APP */
 408               	 ;  113 "ds18b20.c" 1
GAS LISTING /tmp/cczvgKOE.s 			page 15


 409 0094 F894      		cli
 410               	 ;  0 "" 2
 114:ds18b20.c     **** 	#endif
 115:ds18b20.c     **** 
 116:ds18b20.c     **** 	ds18b20_reset(); //reset
 411               		.stabn	68,0,116,.LM39-.LFBB6
 412               	.LM39:
 413               	/* #NOAPP */
 414 0096 0E94 0000 		call ds18b20_reset
 117:ds18b20.c     **** 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
 415               		.stabn	68,0,117,.LM40-.LFBB6
 416               	.LM40:
 417 009a 8CEC      		ldi r24,lo8(-52)
 418 009c 0E94 0000 		call ds18b20_writebyte
 118:ds18b20.c     **** 	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
 419               		.stabn	68,0,118,.LM41-.LFBB6
 420               	.LM41:
 421 00a0 84E4      		ldi r24,lo8(68)
 422 00a2 0E94 0000 		call ds18b20_writebyte
 423               	.L18:
 119:ds18b20.c     **** 
 120:ds18b20.c     **** 	while(!ds18b20_readbit()); //wait until conversion is complete
 424               		.stabn	68,0,120,.LM42-.LFBB6
 425               	.LM42:
 426 00a6 0E94 0000 		call ds18b20_readbit
 427 00aa 8823      		tst r24
 428 00ac 01F0      		breq .L18
 121:ds18b20.c     **** 
 122:ds18b20.c     **** 	ds18b20_reset(); //reset
 429               		.stabn	68,0,122,.LM43-.LFBB6
 430               	.LM43:
 431 00ae 0E94 0000 		call ds18b20_reset
 123:ds18b20.c     **** 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
 432               		.stabn	68,0,123,.LM44-.LFBB6
 433               	.LM44:
 434 00b2 8CEC      		ldi r24,lo8(-52)
 435 00b4 0E94 0000 		call ds18b20_writebyte
 124:ds18b20.c     **** 	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
 436               		.stabn	68,0,124,.LM45-.LFBB6
 437               	.LM45:
 438 00b8 8EEB      		ldi r24,lo8(-66)
 439 00ba 0E94 0000 		call ds18b20_writebyte
 125:ds18b20.c     **** 
 126:ds18b20.c     **** 	//read 2 byte from scratchpad
 127:ds18b20.c     **** 	temperature_l = ds18b20_readbyte();
 440               		.stabn	68,0,127,.LM46-.LFBB6
 441               	.LM46:
 442 00be 0E94 0000 		call ds18b20_readbyte
 443 00c2 C82F      		mov r28,r24
 128:ds18b20.c     **** 	temperature_h = ds18b20_readbyte();
 444               		.stabn	68,0,128,.LM47-.LFBB6
 445               	.LM47:
 446 00c4 0E94 0000 		call ds18b20_readbyte
 129:ds18b20.c     **** 
 130:ds18b20.c     **** 	#if DS18B20_STOPINTERRUPTONREAD == 1
 131:ds18b20.c     **** 	sei();
 447               		.stabn	68,0,131,.LM48-.LFBB6
GAS LISTING /tmp/cczvgKOE.s 			page 16


 448               	.LM48:
 449               	/* #APP */
 450               	 ;  131 "ds18b20.c" 1
 451 00c8 7894      		sei
 452               	 ;  0 "" 2
 132:ds18b20.c     **** 	#endif
 133:ds18b20.c     **** 
 134:ds18b20.c     **** 	//convert the 12 bit value obtained
 135:ds18b20.c     **** 	//retd = ( ( temperature_h << 8 ) + temperature_l ) * 0.0625;
 136:ds18b20.c     **** 	retd = ( ( temperature_h << 8 ) + temperature_l );
 137:ds18b20.c     **** 
 138:ds18b20.c     **** 	return retd;
 453               		.stabn	68,0,138,.LM49-.LFBB6
 454               	.LM49:
 455               	/* #NOAPP */
 456 00ca 90E0      		ldi r25,0
 457 00cc 982F      		mov r25,r24
 458 00ce 8827      		clr r24
 139:ds18b20.c     **** }
 459               		.stabn	68,0,139,.LM50-.LFBB6
 460               	.LM50:
 461 00d0 8C0F      		add r24,r28
 462 00d2 911D      		adc r25,__zero_reg__
 463               	/* epilogue start */
 464 00d4 CF91      		pop r28
 465 00d6 0895      		ret
 466               		.size	ds18b20Gettemp, .-ds18b20Gettemp
 467               		.stabs	"temperature_l:r(5,2)",64,0,108,28
 468               		.stabs	"temperature_h:r(5,2)",64,0,109,24
 469               		.stabn	192,0,0,.LFBB6-.LFBB6
 470               		.stabn	224,0,0,.Lscope6-.LFBB6
 471               	.Lscope6:
 472               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 473               		.stabd	78,0,0
 474               		.stabs	"",100,0,0,.Letext0
 475               	.Letext0:
 476               		.ident	"GCC: (GNU) 5.4.0"
GAS LISTING /tmp/cczvgKOE.s 			page 17


DEFINED SYMBOLS
                            *ABS*:00000000 ds18b20.c
     /tmp/cczvgKOE.s:2      *ABS*:0000003e __SP_H__
     /tmp/cczvgKOE.s:3      *ABS*:0000003d __SP_L__
     /tmp/cczvgKOE.s:4      *ABS*:0000003f __SREG__
     /tmp/cczvgKOE.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cczvgKOE.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cczvgKOE.s:107    .text:00000000 ds18b20_reset
     /tmp/cczvgKOE.s:179    .text:0000001e ds18b20_writebit
     /tmp/cczvgKOE.s:236    .text:00000032 ds18b20_readbit
     /tmp/cczvgKOE.s:307    .text:0000004e ds18b20_writebyte
     /tmp/cczvgKOE.s:348    .text:0000006c ds18b20_readbyte
     /tmp/cczvgKOE.s:395    .text:00000092 ds18b20Gettemp

NO UNDEFINED SYMBOLS
